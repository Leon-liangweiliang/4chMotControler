C51 COMPILER V9.56.0.0   COMPRESSSENSOR                                                    12/28/2020 00:08:34 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE COMPRESSSENSOR
OBJECT MODULE PLACED IN .\Objects\CompressSensor.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE CompressSensor.c LARGE OMF2 OPTIMIZE(0,SIZE) BROWSE ORDER MODP2 INCDIR(.
                    -.\Src) DEBUG PRINT(.\Listings\CompressSensor.lst) TABS(2) OBJECT(.\Objects\CompressSensor.obj)

line level    source

   1          //#include "stm8s.h"
   2          //#include "stm8s_adc1.h"
   3          //#include "stm8s_gpio.h"
   4          #include "main.h"
   5          #include "SaveConfigFile.h"
   6          #include "CompressSensor.h"
   7          
   8          
   9          
  10          volatile uint16_t  ReleaseCompressV=0;
  11          extern volatile uint16_t CurrentCompressV;
  12          extern volatile uint8_t CompressValueUpdate;
  13          extern volatile uint8_t AdcSumCount;
  14          extern volatile uint32_t Adc1sumv;
  15          
  16          // uint16_t code PowerLevelReaDelay[]={110,95,80,70,60,45,30,20,10};
  17           uint16_t code PowerLevelReaDelay[]={110,95,80,70,60,45,30,20,10};
  18          
  19          // uint16_t code PowerLevelChoDelay[]={400,410,420,430,440,450,460,470,480};
  20          uint16_t code PowerLevelChoDelay[]={400,410,420,430,440,450,460,470,480};
  21          
  22          uint8_t PressIsArrive=0;
  23          uint8_t PressProSt=0;
  24          
  25          uint16_t timer3_DelayCounter=0;
  26          
  27          
  28          extern uint8_t _isOnOff;
  29          
  30          void SensorInit(void)
  31          {
  32   1          ADCCFG = 0x2d;   //12bit   480 cpu clocks;
  33   1          ADC_CONTR = 0x82;                           //使能并启动ADC模块  CH2
  34   1          PADC=1;
  35   1          IPH|=PADCH;
  36   1          EADC = 1;                                   //使能ADC中断
  37   1          EA = 1;
  38   1      }
  39          
  40          
  41          void WaitCompressValueUpdate(void)
  42          {
  43   1        CompressValueUpdate=0;
  44   1        AdcSumCount=0;
  45   1        Adc1sumv=0;
  46   1        while (CompressValueUpdate==0);
  47   1      }
  48          
  49          void ReadReleaseCompressV(void)
  50          {
  51   1        SlotCtrl(0);
  52   1        BengCtrl(1);
  53   1        delay_ms(400);
  54   1        /*Start Conversion */
C51 COMPILER V9.56.0.0   COMPRESSSENSOR                                                    12/28/2020 00:08:34 PAGE 2   

  55   1        ADC_CONTR |= 0x40;                          //启动AD转换//ADC1_StartConversion();
  56   1        WaitCompressValueUpdate();
  57   1        ReleaseCompressV=CurrentCompressV;
  58   1        BengCtrl(0);
  59   1        //ADC1_Cmd(DISABLE);
  60   1        ADC_CONTR = 0x08;                           //使能并关闭ADC模块  CH8
  61   1        delay_ms(50);
  62   1        SlotCtrl(0);
  63   1      }
  64          
  65          //1ms延时
  66          void TIM3_Config(uint16_t delayt)
  67          {
  68   1          /* 
  69   1          TIM3 configuration:
  70   1         - TIM3CLK is set to 16 MHz, the TIM2 Prescaler is equal to 256 so the TIM2 counter
  71   1         clock used is 16 MHz / 128 = 125 000 Hz
  72   1        - In this example we need to generate a time base equal to 1 ms 
  73   1          so TIM3_PERIOD = (0.001 * 125000 - 1) = 124 */
  74   1        
  75   1          /*
  76   1        delayt=delayt*125-1;
  77   1      //  TIM3_DeInit();
  78   1        TIM3_TimeBaseInit(TIM3_PRESCALER_128,  delayt);
  79   1        TIM3_ClearFlag(TIM3_FLAG_UPDATE);
  80   1      //  TIM3_ITConfig(TIM3_IT_UPDATE, ENABLE);//使能中断
  81   1        TIM3_Cmd(ENABLE);
  82   1        */
  83   1        timer3_DelayCounter= delayt/5;
  84   1        T4T3M &= 0xFD;    //定时器时钟12T模式
  85   1        T3L = 0x20;   //设置定时初值
  86   1        T3H = 0xE7;   //设置定时初值
  87   1        AUXINTIF &= ~T3IF;                          //清中断标志
  88   1        T4T3M |= 0x08;    //定时器3开始计时
  89   1      }
  90          
  91           
  92          
  93          void TIM3_Init(void)//3455微秒@22.1184MHz
  94          {
  95   1          /* 
  96   1          TIM3 configuration:
  97   1         - TIM3CLK is set to 16 MHz, the TIM2 Prescaler is equal to 256 so the TIM2 counter
  98   1         clock used is 16 MHz / 128 = 125 000 Hz
  99   1        - In this example we need to generate a time base equal to 1 ms 
 100   1          so TIM3_PERIOD = (0.001 * 125000 - 1) = 124 */
 101   1        /* 
 102   1        TIM3_DeInit();
 103   1        TIM3_ClearFlag(TIM3_FLAG_UPDATE);
 104   1        TIM3_ITConfig(TIM3_IT_UPDATE, ENABLE);//使能中断
 105   1        //TIM3_Cmd(DISABLE);
 106   1        */
 107   1      
 108   1        T4T3M &= 0xfd;  //定时器时钟12T模式
 109   1        T3L = 0x20;   //设置定时初值
 110   1        T3H = 0xE7;   //设置定时初值
 111   1        IE2 |= ET3;                                  //使能定时器中断
 112   1        T4T3M &= 0xf7;                               //停止启动定时器
 113   1      }
 114          
 115          //控制压力线程
 116          void CtrlCompress(uint8_t ct)
C51 COMPILER V9.56.0.0   COMPRESSSENSOR                                                    12/28/2020 00:08:34 PAGE 3   

 117          {
 118   1        if (ct)
 119   1          {
 120   2        //  Adc1sumv=0;
 121   2        //  CompressValueUpdate=0;
 122   2          AdcSumCount=0;
 123   2          PressIsArrive=0;  //压力到达标志
 124   2          PressProSt=0;
 125   2          BengCtrl(1);//打开气泵
 126   2          SlotCtrl(0);
 127   2          //ADC1_Cmd(ENABLE);
 128   2          //ADC1_StartConversion(); //启动ADC
 129   2          ADC_CONTR = 0x88;                           //使能并启动ADC模块  CH8
 130   2          ADC_CONTR |= 0x40;                          //启动AD转换
 131   2          TIM3_Config(500);  //500ms充气延时
 132   2          }
 133   1        else 
 134   1          {
 135   2          BengCtrl(0);
 136   2          SlotCtrl(1);
 137   2          //ADC1_Cmd(DISABLE);
 138   2          //TIM3_Cmd(DISABLE);
 139   2          ADC_CONTR = 0x08;                           //使能并启动ADC模块  CH8
 140   2          T4T3M &= 0xf7;                               //停止启动定时器
 141   2          }
 142   1      }
 143          
 144          void ControlCompress(void)
 145          {
 146   1        uint8_t PowerLevel;
 147   1        PowerLevel=SaveConfigfile[0].sEPPowerLevel;
 148   1        if (CurrentCompressV<(THROATHPRES))  //压力阈值判断，达到阈值
 149   1          {
 150   2          PressIsArrive=1; //到达压力标志
 151   2          if (PowerLevel<10)
 152   2            {
 153   3            PressProSt=1; //压力到阈值，抽气延时
 154   3            TIM3_Config(PowerLevelChoDelay[PowerLevel-1]); //开始抽气延时，暂停ADC,
 155   3            }
 156   2          else
 157   2            {
 158   3            SlotCtrl(0);
 159   3            //ADC1_StartConversion(); 
 160   3            ADC_CONTR |= 0x40;                          //启动AD转换
 161   3            TIM3_Config(500);  //500ms充气延时
 162   3            }
 163   2          }
 164   1        else //压力未到,接续ADC检测
 165   1          {
 166   2          SlotCtrl(0);
 167   2          //ADC1_StartConversion();
 168   2          ADC_CONTR |= 0x40;                          //启动AD转换
 169   2          }
 170   1      
 171   1      }
 172          
 173          void Tim3TimeroutSub(void)
 174          {
 175   1        uint8_t PowerLevel;
 176   1        if (timer3_DelayCounter>0) 
 177   1          {
 178   2          timer3_DelayCounter--;
C51 COMPILER V9.56.0.0   COMPRESSSENSOR                                                    12/28/2020 00:08:34 PAGE 4   

 179   2          return;
 180   2          }
 181   1        else T4T3M &= 0xf7;                               //停止启动定时器
 182   1        //TIM3_Cmd(DISABLE);
 183   1        PowerLevel=SaveConfigfile[0].sEPPowerLevel;
 184   1        if (PressProSt==1) //压力到阈值，抽气延时
 185   1          {
 186   2            SlotCtrl(1);//放气
 187   2            TIM3_Config(PowerLevelReaDelay[PowerLevel-1]);  //开始放气延时
 188   2            PressProSt=2;
 189   2          }
 190   1        else if (PressProSt==2)
 191   1          {
 192   2            PressProSt=0;
 193   2            AdcSumCount=0;
 194   2            SlotCtrl(0);
 195   2            //ADC1_StartConversion();
 196   2            ADC_CONTR |= 0x40;                          //启动AD转换
 197   2            TIM3_Config(500);  //500ms充气延时
 198   2          }
 199   1        else if (PressProSt==0)
 200   1          {
 201   2          PressIsArrive=0; //未到达压力标志
 202   2          }
 203   1        
 204   1      }
 205          
 206          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    481    ----
   CONSTANT SIZE    =     36    ----
   XDATA SIZE       =     11    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
