C51 COMPILER V9.59.0.0   STC8A_IT                                                          04/01/2024 20:57:26 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE STC8A_IT
OBJECT MODULE PLACED IN .\Objects\stc8a_it.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE stc8a_it.c LARGE OMF2 OPTIMIZE(0,SIZE) BROWSE ORDER INCDIR(..\Src;.\LCD)
                    - DEBUG PRINT(.\Listings\stc8a_it.lst) TABS(2) OBJECT(.\Objects\stc8a_it.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file     stm8s_it.c
   4            * @author   MCD Application Team
   5            * @version  V2.2.0
   6            * @date     30-September-2014
   7            * @brief    Main Interrupt Service Routines.
   8            ******************************************************************************
   9            * @attention
  10            *
  11            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
  12            *
  13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  14            * You may not use this file except in compliance with the License.
  15            * You may obtain a copy of the License at:
  16            *
  17            *        http://www.st.com/software_license_agreement_liberty_v2
  18            *
  19            * Unless required by applicable law or agreed to in writing, software 
  20            * distributed under the License is distributed on an "AS IS" BASIS, 
  21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  22            * See the License for the specific language governing permissions and
  23            * limitations under the License.
  24            *
  25            ******************************************************************************
  26            */ 
  27          
  28          /* Includes ------------------------------------------------------------------*/
  29          //#include "stm8s_it.h"
  30          #include "main.h"
  31          #include "uarttask.h"
  32          #include "ABencoder.h"
  33          #include "spi_flash.h"
  34          #include "SaveConfigfile.h"
  35          
  36          
  37          #define ADC1SUMNUM 128
  38          #define chushu 7
  39          
  40          #define ONDelay 200
  41          #define OFFDelay 200
  42          
  43          
  44          
  45          /** @addtogroup UART1_Interrupt
  46            * @{
  47            */
  48          /* Private typedef -----------------------------------------------------------*/
  49          /* Private define ------------------------------------------------------------*/
  50          /* Private macro -------------------------------------------------------------*/
  51          /* Private variables ---------------------------------------------------------*/
  52          
  53          
  54          
C51 COMPILER V9.59.0.0   STC8A_IT                                                          04/01/2024 20:57:26 PAGE 2   

  55          void INT3_Isr() interrupt 11
  56          {
  57   1        delay_us(5);
  58   1        if (P37==0 && P33==1)
  59   1          {
  60   2          //if(ABEncoderDir==0) 
  61   2            ABEncoderDir=1;
  62   2          }
  63   1          
  64   1      }
  65          
  66          void INT1_Isr() interrupt 2
  67          {
  68   1        delay_us(5);
  69   1          if (P33==0 && P37==1)
  70   1          {
  71   2          //if(ABEncoderDir==0) 
  72   2            ABEncoderDir=0xff;
  73   2            } 
  74   1        /*
  75   1        else if (P33==1 && P37==1) 
  76   1          {
  77   1          ABEncoderDir=0;
  78   1          }
  79   1        */  
  80   1      }
  81          
  82          /*
  83          void common_isr() interrupt 13
  84          {
  85            unsigned char psw2_st;
  86            u8 intf;
  87            psw2_st = P_SW2;
  88            P_SW2 |= 0x80;
  89             intf = P3INTF;
  90             P3INTF = 0x00;
  91            P_SW2 = psw2_st;
  92           if ((intf & 0x08) && (ABEncoderDir==0) )
  93            {
  94            ABEncoderDir=1;
  95            }
  96           else if ((intf & 0x80) && (ABEncoderDir==0) )
  97            {
  98            ABEncoderDir=0xff;
  99            }
 100          
 101          }
 102          */
 103          //20ms 
 104          void TM0_Isr() interrupt 1 
 105          {
 106   1        /* In order to detect unexpected events during development,
 107   1           it is recommended to set a breakpoint on the following instruction.
 108   1        */
 109   1          Time0OutDelaySub();
 110   1      }
 111          /*
 112          void UART1_Isr() interrupt 4
 113          {
 114              if (TI)
 115              {
 116                  TI = 0;                                 //清中断标志
C51 COMPILER V9.59.0.0   STC8A_IT                                                          04/01/2024 20:57:26 PAGE 3   

 117                  uart1Memory.busy = 0;
 118              }
 119              if (RI)
 120              {
 121                  RI = 0;                                 //清中断标志
 122                  uart1Memory.UartPkgTimeoutCounter=0;
 123              uart1Memory.RxBuffer[uart1Memory.RxCounter]=SBUF;
 124              uart1Memory.RxByteSize++;
 125              if (uart1Memory.RxCounter<(RxBufferSize-1)) uart1Memory.RxCounter++; else uart1Memory.RxCounter=0;
 126              }
 127          }
 128          */
 129          
 130          
 131          
 132          void DoRsUart4Cmd(void)
 133          {
 134   1        u32 WrAddr;
 135   1        static u32 SectorAddr=0;
 136   1        if (uart4rcpkg.pic_N==1)  //LOGO PICURE
 137   1          {
 138   2            if (uart4rcpkg.pkg_num==0) 
 139   2              {
 140   3                SectorAddr=0;
 141   3                SPI_FLASH_SectorErase(0);
 142   3              }
 143   2            WrAddr=(uart4rcpkg.pkg_num)<<8;
 144   2            if (SectorAddr!=(WrAddr/SPI_FLASH_SectorSize))
 145   2              {
 146   3              SPI_FLASH_SectorErase(WrAddr);
 147   3              SectorAddr=WrAddr/SPI_FLASH_SectorSize;
 148   3              }
 149   2            SPI_FLASH_BufferWrite(uart4rcpkg.UartRunBuf,WrAddr,uart4rcpkg.pklen+1);
 150   2            S4BUF=0x01;
 151   2          }
 152   1        else 
 153   1          {
 154   2          S4BUF=0xfe;
 155   2          }
 156   1      }
 157          
 158          
 159          
 160          void TranUart4Cmd_usb(void)
 161          {
 162   1        
 163   1        usbCmdCode=uart4rcpkg.pic_N;
 164   1        usbWRAddr=uart4rcpkg.pklen;
 165   1        usbWRData=uart4rcpkg.UartRunBuf[0]; 
 166   1        if (uart4rcpkg.pic_N==0x80) UsbCmdUpdate=1; else UsbCmdUpdate=2;
 167   1        
 168   1        
 169   1      }
 170          
 171          
 172          u8 DoUart4Pkg(u8 rxByte)  //USB
 173          {
 174   1        uart4rcpkg.UartPkgTimeoutCounter=0;
 175   1        
 176   1        if ((uart4rcpkg.UsbCmdStatus==REC4_HEAD1) && (uart4rcpkg.RecStatus)==REC2_HEAD1)
 177   1        {
 178   2          if (rxByte==0X5A) uart4rcpkg.RecStatus=REC2_HEAD2;
C51 COMPILER V9.59.0.0   STC8A_IT                                                          04/01/2024 20:57:26 PAGE 4   

 179   2          else if (rxByte==0x69) uart4rcpkg.UsbCmdStatus=REC4_HEAD2;
 180   2        }
 181   1      
 182   1        else 
 183   1        {
 184   2          if (uart4rcpkg.UsbCmdStatus!=REC4_HEAD1)
 185   2          {
 186   3            switch (uart4rcpkg.UsbCmdStatus)
 187   3            {
 188   4              case REC4_HEAD2:
 189   4                if (rxByte==0x96) uart4rcpkg.UsbCmdStatus=REC4_CMD;
 190   4                else uart4rcpkg.UsbCmdStatus=REC4_HEAD1;
 191   4              break;
 192   4              case REC4_CMD:
 193   4                  uart4rcpkg.pic_N=rxByte;
 194   4                  uart4rcpkg.UsbCmdStatus=REC4_ADDR;
 195   4                  uart4rcpkg.Addsum=rxByte;
 196   4              break;
 197   4              
 198   4              case REC4_ADDR:
 199   4                  uart4rcpkg.pklen =rxByte;
 200   4                  uart4rcpkg.UsbCmdStatus=REC4_DATA_RLEN;
 201   4                  uart4rcpkg.Addsum +=rxByte;
 202   4              break;
 203   4      
 204   4              case REC4_DATA_RLEN:
 205   4                  uart4rcpkg.bufwpoint=1;
 206   4                  uart4rcpkg.UartRunBuf[0]=rxByte;
 207   4                  uart4rcpkg.Addsum +=rxByte;
 208   4                  uart4rcpkg.UsbCmdStatus=REC4_ADDSUM;
 209   4              break;
 210   4              case REC4_ADDSUM:
 211   4                if (uart4rcpkg.Addsum==rxByte) // check addsum
 212   4                {
 213   5                  TranUart4Cmd_usb();
 214   5                  uart4rcpkg.UsbCmdStatus=REC4_HEAD1;
 215   5                  return 1;
 216   5                }
 217   4                else
 218   4                {
 219   5                  uart4rcpkg.UsbCmdStatus=REC2_HEAD1;
 220   5                }
 221   4            }
 222   3            
 223   3          }
 224   2          else 
 225   2          { 
 226   3            switch (uart4rcpkg.RecStatus)
 227   3            {
 228   4              case REC4_HEAD2:
 229   4                if (rxByte==0XA5) uart4rcpkg.RecStatus=REC2_PIC_N;
 230   4                else uart4rcpkg.RecStatus=REC2_HEAD1;
 231   4              break;
 232   4              case REC2_PIC_N:
 233   4                  uart4rcpkg.pic_N=rxByte;
 234   4                  uart4rcpkg.RecStatus=REC2_PKG_N_H;
 235   4              break;
 236   4              
 237   4              case REC2_PKG_N_H:
 238   4                  uart4rcpkg.pkg_num =rxByte;
 239   4                  uart4rcpkg.pkg_num=(uart4rcpkg.pkg_num<<8);
 240   4                  uart4rcpkg.RecStatus=REC2_PKG_N_L;
C51 COMPILER V9.59.0.0   STC8A_IT                                                          04/01/2024 20:57:26 PAGE 5   

 241   4              break;
 242   4      
 243   4              case REC2_PKG_N_L:
 244   4                  uart4rcpkg.pkg_num |=rxByte;
 245   4                  uart4rcpkg.RecStatus=REC2_RKLEN;
 246   4              break;
 247   4              
 248   4              case REC2_RKLEN:
 249   4                  uart4rcpkg.pklen=rxByte;
 250   4                  uart4rcpkg.bufwpoint=0;
 251   4                  uart4rcpkg.RecStatus=REC2_DATA;
 252   4                  uart4rcpkg.Addsum=0;
 253   4              break;
 254   4              case REC2_DATA:
 255   4                uart4rcpkg.UartRunBuf[uart4rcpkg.bufwpoint]=rxByte;
 256   4                uart4rcpkg.Addsum+=rxByte;
 257   4                if (uart4rcpkg.bufwpoint>=uart4rcpkg.pklen)
 258   4                  {
 259   5                    uart4rcpkg.RecStatus=REC2_ADDSUM;
 260   5                  }
 261   4                else 
 262   4                  {
 263   5                    uart4rcpkg.bufwpoint++;
 264   5                  }
 265   4                
 266   4              break;
 267   4              case REC2_ADDSUM:
 268   4                if (uart4rcpkg.Addsum==rxByte) // check addsum
 269   4                {
 270   5                  DoRsUart4Cmd();
 271   5                  uart4rcpkg.RecStatus=REC2_HEAD1;
 272   5                  return 1;
 273   5                }
 274   4                else
 275   4                {
 276   5                  S4BUF=0xff;
 277   5                  uart4rcpkg.RecStatus=REC2_HEAD1;
 278   5                }
 279   4            }
 280   3            
 281   3          }
 282   2        }
 283   1        
 284   1        return 0xff;
 285   1      
 286   1      
 287   1      
 288   1      }
 289          
 290          
 291          
 292          void Uart2Isr() interrupt 8 
 293          {
 294   1      
 295   1          if (S2CON & 0x02)
 296   1          {
 297   2              S2CON &= ~0x02;
 298   2              uart2Memory.busy = 0;
 299   2          }
 300   1          
 301   1          if (S2CON & 0x01)
 302   1          {
C51 COMPILER V9.59.0.0   STC8A_IT                                                          04/01/2024 20:57:26 PAGE 6   

 303   2              S2CON &= ~0x01;
 304   2          uart2Memory.UartPkgTimeoutCounter=0;
 305   2          uart2Memory.RxBuffer[uart2Memory.RxCounter]=S2BUF;
 306   2          uart2Memory.RxByteSize++;
 307   2          if (uart2Memory.RxCounter<(RxBufferSize-1)) uart2Memory.RxCounter++; else uart2Memory.RxCounter=0;
 308   2          
 309   2          
 310   2          }
 311   1      }
 312           /*
 313          void UART3_Isr() interrupt 17
 314          {
 315              if (S3CON & 0x02)
 316              {
 317                  S3CON &= ~0x02;                         //清中断标志
 318                  uart3Memory.busy = 0;                        
 319              }
 320              if (S3CON & 0x01)
 321              {
 322                  S3CON &= ~0x01;                         //清中断标志
 323                  uart3Memory.UartPkgTimeoutCounter=0;
 324              uart3Memory.RxBuffer[uart3Memory.RxCounter]=S3BUF;
 325              uart3Memory.RxByteSize++;
 326              if (uart3Memory.RxCounter<(RxBufferSize-1)) uart3Memory.RxCounter++; else uart3Memory.RxCounter=0;
 327              }
 328          }
 329          */
 330          void UART4_Isr() interrupt 18
 331          {
 332   1          u8 rect;
 333   1          if (S4CON & 0x02)
 334   1          {
 335   2              S4CON &= ~0x02;                         //清中断标志
 336   2              uart4rcpkg.busy = 0;                      
 337   2          }
 338   1          if (S4CON & 0x01)
 339   1          {
 340   2              S4CON &= ~0x01;                         //清中断标志
 341   2             rect=S4BUF;
 342   2              DoUart4Pkg(rect);
 343   2          }
 344   1      }
 345          
 346          
 347           


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1241    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     10    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
