C51 COMPILER V9.56.0.0   MOTOR                                                             12/28/2020 00:08:35 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MOTOR
OBJECT MODULE PLACED IN .\Objects\motor.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE motor.c LARGE OMF2 OPTIMIZE(0,SIZE) BROWSE ORDER MODP2 INCDIR(..\Src) DE
                    -BUG PRINT(.\Listings\motor.lst) TABS(2) OBJECT(.\Objects\motor.obj)

line level    source

   1          #include "main.h"
   2          #include "motor.h"
   3          
   4          #define FAST_SPEED_DUTY  85//62//50
   5          #define NORMAL_SPEED_DUTY 80//56// 35
   6          #define SLOW_SPEED_DUTY  75//50//20
   7          #define Back_SPEED_DUTY  85//71//60
   8          #define HMove_SPEED_DUTY   98
   9          
  10          
  11          #define TIM1_PERIOD 100 
  12          
  13          volatile MOTOR_PARAM motor1Params;
  14          
  15          MOTOR_CTRL_COMMAND motor1Cmd;
  16          
  17          
  18          void TIM4_Config(void)  //691微秒@22.1184MHz
  19          {
  20   1          /* 
  21   1          TIM4 configuration:
  22   1         - TIM4CLK is set to 16 MHz, the TIM2 Prescaler is equal to 256 so the TIM2 counter
  23   1         clock used is 16 MHz / 128 = 125 000 Hz
  24   1        - In this example we need to generate a time base equal to 1 ms   r: 1/16*11.0592=0.6912ms
  25   1          so TIM4_PERIOD = (0.001 * 125000 - 1) = 124 */
  26   1         /*
  27   1        TIM4_DeInit();
  28   1        TIM4_TimeBaseInit(TIM4_PRESCALER_128,  124);
  29   1        TIM4_ClearFlag(TIM4_FLAG_UPDATE);
  30   1        TIM4_ITConfig(TIM4_IT_UPDATE, ENABLE);//使能中断
  31   1        TIM4_Cmd(DISABLE);
  32   1        */
  33   1        
  34   1          T4T3M &= 0x7f;                               //定时器停止
  35   1        T4L = 0x06;   //设置定时初值
  36   1        T4H = 0xFB;   //设置定时初值
  37   1          IE2 |= ET4;                                  //使能定时器中断
  38   1      
  39   1      }
  40          
  41          
  42          
  43          /**
  44            * @brief  Configure TIM1 to generate 7 PWM signals with 4 different duty cycles
  45            * @param  None
  46            * @retval None
  47            */
  48          void PWM_Config(void)
  49          {
  50   1      #if 0
                 TIM1_DeInit();
              
                /* Time Base configuration */
                  /* 
C51 COMPILER V9.56.0.0   MOTOR                                                             12/28/2020 00:08:35 PAGE 2   

                  TIM1 configuration:
                 - TIM1CLK is set to 16 MHz, the TIM2 Prescaler is equal to 1 so the TIM2 counter
                 clock used is 16 MHz / 8 = 2MHz
                - In this example we need to generate a time base equal to 20KHZ
                 so TIM1_PERIOD = (2MHz/ 20KHZ - 1) = 99 
                 */
                 
                /*
                TIM1_Period = 99
                TIM1_Prescaler =7
                TIM1_CounterMode = TIM1_COUNTERMODE_UP
                TIM1_RepetitionCounter = 0
                */
              
                TIM1_TimeBaseInit(7, TIM1_COUNTERMODE_UP, TIM1_PERIOD, 0);
              
                /* Channel 1, 2,3 and 4 Configuration in PWM mode */
                
                /*
                TIM1_OCMode = TIM1_OCMODE_PWM2
                TIM1_OutputState = TIM1_OUTPUTSTATE_ENABLE
                TIM1_OutputNState = TIM1_OUTPUTNSTATE_ENABLE
                TIM1_Pulse = CCR1_Val
                TIM1_OCPolarity = TIM1_OCPOLARITY_LOW
                TIM1_OCNPolarity = TIM1_OCNPOLARITY_HIGH
                TIM1_OCIdleState = TIM1_OCIDLESTATE_SET
                TIM1_OCNIdleState = TIM1_OCIDLESTATE_RESET
                /*TIM1_Pulse = CCR1_Val*/
                TIM1_OC1Init(TIM1_OCMODE_PWM2, TIM1_OUTPUTSTATE_ENABLE, TIM1_OUTPUTNSTATE_ENABLE,
                             0, TIM1_OCPOLARITY_LOW, TIM1_OCNPOLARITY_HIGH, TIM1_OCIDLESTATE_SET,
                             TIM1_OCNIDLESTATE_RESET); 
              
                TIM1_OC2Init(TIM1_OCMODE_PWM2, TIM1_OUTPUTSTATE_ENABLE, TIM1_OUTPUTNSTATE_ENABLE, 0,
                             TIM1_OCPOLARITY_LOW, TIM1_OCNPOLARITY_HIGH, TIM1_OCIDLESTATE_SET, 
                             TIM1_OCNIDLESTATE_RESET);  
              
              
                /* TIM1 counter enable */
                TIM1_Cmd(ENABLE);
              
                /* TIM1 Main Output Enable */
                TIM1_CtrlPWMOutputs(ENABLE);
              #endif
  98   1      
  99   1          P_SW2 = 0x80;
 100   1          PWMCKS = 10;                              // PWM时钟为系统时钟/11
 101   1          PWMC = TIM1_PERIOD;                              //设置PWM周期为100个PWM时钟
 102   1          
 103   1        PWM1T1= 0;                             //PWM1在计数值为0H地方输出低电平
 104   1          PWM1T2= 0;                             //PWM1在计数值为0H地方输出高电平
 105   1          
 106   1          PWM2T1= 0;                             //PWM1在计数值为0H地方输出低电平
 107   1          PWM2T2= 0;                             //PWM1在计数值为0H地方输出高电平
 108   1          
 109   1          PWM1CR= 0x80;                               //使能PWM0输出
 110   1          PWM2CR= 0x80;                               //使能PWM1输出
 111   1          P_SW2 = 0x00;
 112   1      
 113   1          PWMCR = 0x80;                               //启动PWM模块
 114   1      }
 115          
 116          
C51 COMPILER V9.56.0.0   MOTOR                                                             12/28/2020 00:08:35 PAGE 3   

 117          
 118          /***********************************************************************************************
 119          *函数名 ：Motor_init
 120          *函数功能描述 ：包括选择电机芯片初始化和电机SPI初始化
 121          *函数参数 ： 
 122          *函数返回值 ：
 123          ***********************************************************************************************/
 124          void Motor_init(void)
 125          {
 126   1         //pwm
 127   1         //GPIO_Init(GPIOC, (GPIO_Pin_TypeDef)(GPIO_PIN_1| GPIO_PIN_2), GPIO_MODE_OUT_PP_LOW_FAST);
 128   1        
 129   1         
 130   1         //AB编码器输入
 131   1         //GPIO_Init(GPIOD, (GPIO_Pin_TypeDef)(GPIO_PIN_3| GPIO_PIN_4), GPIO_MODE_IN_PU_IT);
 132   1         //EXTI_SetExtIntSensitivity(EXTI_PORT_GPIOD, EXTI_SENSITIVITY_RISE_FALL);
 133   1         //INT0,INT1;
 134   1          PX0=1;     //INT0,INT1 最高级优先
 135   1          IPH|=PX0H;    
 136   1        PX1=1;
 137   1          IPH|=PX1H;    
 138   1        IT0 = 0;                                    //使能INT0上升沿和下降沿中断
 139   1          EX0 = 1;                                    //使能INT0中断
 140   1          IT1 = 0;                                    //使能INT1上升沿和下降沿中断
 141   1          EX1 = 1;                                    //使能INT1中断
 142   1         motor1Params.MotorDir= MOTOR_CCW_IDLE;
 143   1         motor1Params.MotorSpeedStatus=MOTOR_ST_STOP;
 144   1         motor1Params.Motor2Speed=0;
 145   1         motor1Params.MotorRuningSpeed=0;
 146   1         motor1Params.PositionABCounter=0;
 147   1         motor1Params.PrePositionABCounter=0;
 148   1         motor1Params.MotorDir=MOTOR_CCW_IDLE;
 149   1      //   motor1Params.PreABstnum=0;
 150   1      //   motor1Params.PreABStatus[0]=ReadABOpticalEncoder();
 151   1        // motor1Params.PreABStatus=ReadABOpticalEncoder();
 152   1         motor1Params.ABEncoder_Error=0;
 153   1         motor1Params.Motor2MoveStep=0;
 154   1         motor1Cmd=MOTOR_CMD_NULL;
 155   1        
 156   1         PWM_Config();
 157   1         TIM4_Config();
 158   1        
 159   1      }
 160          
 161          void MotorMoveSpeedUpdate(MOTOR_DIRECTION CCW, uint16_t speed)
 162          {
 163   1        
 164   1        if (CCW==MOTOR_CCW)
 165   1          {
 166   2          //TIM1_SetCompare2(0);
 167   2          ///TIM1_SetCompare1(speed);
 168   2          P_SW2 = 0x80;
 169   2          PWM2T1= 0;                             //PWM1在计数值为0H地方输出低电
 170   2            PWM1T1= speed;                             //PWM1在计数值为0H地方输出低电平
 171   2            P_SW2 = 0x00;
 172   2          }
 173   1        else if (CCW==MOTOR_CW)
 174   1          {
 175   2          //TIM1_SetCompare1(0);
 176   2          //TIM1_SetCompare2(speed);
 177   2          P_SW2 = 0x80;
 178   2          PWM1T1= 0;                             //PWM1在计数值为0H地方输出低电
C51 COMPILER V9.56.0.0   MOTOR                                                             12/28/2020 00:08:35 PAGE 4   

 179   2            PWM2T1= speed;                             //PWM1在计数值为0H地方输出低电平
 180   2            P_SW2 = 0x00;
 181   2          }
 182   1        else
 183   1          {
 184   2          //TIM1_SetCompare1(0);
 185   2          //TIM1_SetCompare2(0);
 186   2          P_SW2 = 0x80;
 187   2          PWM1T1= 0;                             //PWM1在计数值为0H地方输出低电
 188   2          PWM2T1= 0;                             //PWM1在计数值为0H地方输出低电
 189   2          P_SW2 = 0x00;
 190   2          }
 191   1        
 192   1      }
 193          
 194          uint16_t Get2MoveSpeed(MOTOR_SPEED mop)
 195          {
 196   1        if (mop==MOTOR_STOP)
 197   1          return 0;
 198   1        else if (mop==MOTOR_FAST)
 199   1          return FAST_SPEED_DUTY;
 200   1        else if (mop==MOTOR_NORMAL)
 201   1          return NORMAL_SPEED_DUTY;
 202   1        else if (mop==MOTOR_SLOW)
 203   1          return SLOW_SPEED_DUTY;
 204   1        else if (mop==MOTOR_BACK)
 205   1          return Back_SPEED_DUTY;
 206   1        else if (mop==MOTOR_HANDMOVE)
 207   1          return HMove_SPEED_DUTY;
 208   1        return 0;
 209   1      }
 210          
 211          
 212          
 213          void MotorMoveStep(MOTOR_DIRECTION ccw, MOTOR_SPEED Tospeed, uint16_t MStep)
 214          {
 215   1        motor1Params.MotorDir=ccw;
 216   1        motor1Params.Motor2MoveStep=MStep;
 217   1        motor1Params.PositionABCounter=0;
 218   1        motor1Params.PrePositionABCounter=0;
 219   1        motor1Params.Motor2Speed=Get2MoveSpeed(Tospeed);
 220   1        motor1Cmd=MOTOR_MOVE_STEP;
 221   1        
 222   1        //TIM1_CtrlPWMOutputs(ENABLE);
 223   1        //TIM4_Cmd(ENABLE);  
 224   1        P_SW2 = 0x80;
 225   1        PWM1CR= 0x80;                               //使能PWM0输出
 226   1          PWM2CR= 0x80;                               //使能PWM1输出
 227   1          P_SW2 = 0x00;
 228   1        T4T3M |= 0x80;    //定时器4开始计时
 229   1      }
 230          
 231          
 232          
 233          void Motor_Const_Move(MOTOR_DIRECTION ccw,MOTOR_SPEED Tospeed)
 234          {
 235   1        motor1Params.MotorDir=ccw;
 236   1        motor1Params.Motor2Speed=Get2MoveSpeed(Tospeed);
 237   1        //TIM1_CtrlPWMOutputs(ENABLE);
 238   1        //TIM4_Cmd(ENABLE);
 239   1        P_SW2 = 0x80;
 240   1        PWM1CR= 0x80;                               //使能PWM0输出
C51 COMPILER V9.56.0.0   MOTOR                                                             12/28/2020 00:08:35 PAGE 5   

 241   1          PWM2CR= 0x80;                               //使能PWM1输出
 242   1          P_SW2 = 0x00;
 243   1        T4T3M |= 0x80;    //定时器4开始计时
 244   1      }
 245          
 246          
 247          void Motor_HStop(void)
 248          {
 249   1        //TIM4_Cmd(DISABLE);
 250   1        //TIM1_CtrlPWMOutputs(DISABLE);
 251   1        //GPIO_WriteLow(GPIOC, (GPIO_Pin_TypeDef)(GPIO_PIN_1|GPIO_PIN_2));
 252   1        
 253   1        T4T3M &= 0x7f;                               //定时器停止
 254   1        P_SW2 = 0x80;
 255   1        PWM1CR= 0x00;                               //使能PWM0输出
 256   1          PWM2CR= 0x00;                               //使能PWM1输出
 257   1          P_SW2 = 0x00;
 258   1        P21=0;P22=0;
 259   1        
 260   1        motor1Params.Motor2Speed=0;
 261   1        motor1Params.MotorRuningSpeed=0;
 262   1        motor1Params.MotorSpeedStatus=MOTOR_ST_STOP;
 263   1        MotorMoveSpeedUpdate(MOTOR_CCW_IDLE,0);
 264   1        
 265   1      }
 266          
 267          void Motor_SStop(void)
 268          {
 269   1        motor1Params.Motor2Speed=0;
 270   1        motor1Cmd=MOTOR_CMD_SSTOP;
 271   1        //TIM1_CtrlPWMOutputs(ENABLE);
 272   1        //TIM4_Cmd(ENABLE);
 273   1        P_SW2 = 0x80;
 274   1        PWM1CR= 0x80;                               //使能PWM0输出
 275   1          PWM2CR= 0x80;                               //使能PWM1输出
 276   1          P_SW2 = 0x00;
 277   1        T4T3M |= 0x80;    //定时器4开始计时
 278   1      }
 279          
 280          //读取编码器的状态，返回读取值，AB
 281          //0x00,0x01,0x02,0x03   ,高4位A, 低4位为B
 282          
 283          uint8_t ReadABOpticalEncoder(void)
 284          {
 285   1        uint8_t ret=0;
 286   1        //ret=GPIO_ReadInputData(GPIOD);
 287   1        ret=P3;
 288   1        ret=(ret>>2)&0X3;
 289   1        return (ret);
 290   1      }
 291          
 292          //马达运动1步
 293          uint8_t MotorMoveOneStep(MOTOR_DIRECTION ccw)
 294          {
 295   1        Motor_HStop();
 296   1        motor1Params.MotorRuningSpeed=motor1Params.Motor2Speed=SLOW_SPEED_DUTY;
 297   1        motor1Params.MotorSpeedStatus=MOTOR_ST_CON;
 298   1        motor1Params.PrePositionABCounter=motor1Params.PositionABCounter;
 299   1        
 300   1        while(motor1Params.PrePositionABCounter==motor1Params.PositionABCounter && motor1Params.ABEncoder_Error==
             -0)
 301   1          {
C51 COMPILER V9.56.0.0   MOTOR                                                             12/28/2020 00:08:35 PAGE 6   

 302   2          if (ccw==MOTOR_CCW)
 303   2            {
 304   3            //GPIO_WriteHigh(GPIOC, (GPIO_Pin_TypeDef)(GPIO_PIN_1));
 305   3            P21=1;
 306   3            delay_ms(2);
 307   3            //GPIO_WriteLow(GPIOC, (GPIO_Pin_TypeDef)(GPIO_PIN_1));
 308   3            P21=0;
 309   3            
 310   3            }
 311   2          else 
 312   2            {
 313   3            //GPIO_WriteHigh(GPIOC, (GPIO_Pin_TypeDef)(GPIO_PIN_2));
 314   3            P22=1;
 315   3            delay_ms(2);
 316   3            //GPIO_WriteLow(GPIOC, (GPIO_Pin_TypeDef)(GPIO_PIN_2));
 317   3            P22=0;
 318   3            }
 319   2          }
 320   1        motor1Params.MotorSpeedStatus=MOTOR_ST_STOP;
 321   1        motor1Params.MotorRuningSpeed=motor1Params.Motor2Speed=0;
 322   1        if (motor1Params.ABEncoder_Error==1) return 0;
 323   1        return 1;
 324   1      }
 325          
 326          MOTOR_SPEED_STATUS MotorACCChangeSpSub(void)
 327          {
 328   1        if (motor1Params.MotorRuningSpeed <motor1Params.Motor2Speed)
 329   1          {
 330   2          motor1Params.MotorRuningSpeed+=MOTORACCSPEED;
 331   2          MotorMoveSpeedUpdate(motor1Params.MotorDir,motor1Params.MotorRuningSpeed);
 332   2          return MOTOR_ST_ACC;  //加速
 333   2          }
 334   1        else if (motor1Params.MotorRuningSpeed > motor1Params.Motor2Speed)
 335   1          {
 336   2          motor1Params.MotorRuningSpeed-=MOTORACCSPEED;
 337   2          MotorMoveSpeedUpdate(motor1Params.MotorDir,motor1Params.MotorRuningSpeed);
 338   2          return MOTOR_ST_DEC;  //减速
 339   2          } 
 340   1        else if (motor1Params.MotorRuningSpeed ==0)
 341   1          return MOTOR_ST_STOP;  //停止
 342   1      
 343   1          return MOTOR_ST_CON;  //匀速
 344   1        
 345   1      }
 346          
 347          
 348          uint8_t DoMotorCmd(void)
 349          {
 350   1        if (motor1Cmd==MOTOR_CMD_NULL)  return 0;
 351   1      
 352   1        switch (motor1Cmd)
 353   1          {
 354   2          case MOTOR_CMD_SSTOP:
 355   2            if (motor1Params.MotorSpeedStatus==MOTOR_ST_STOP)
 356   2              {
 357   3              motor1Params.MotorDir=MOTOR_CCW_IDLE;
 358   3              motor1Cmd=MOTOR_CMD_NULL;
 359   3              return 0;
 360   3              }
 361   2          break;
 362   2          case MOTOR_MOVE_STEP:
 363   2            if (motor1Params.PositionABCounter>=motor1Params.Motor2MoveStep)
C51 COMPILER V9.56.0.0   MOTOR                                                             12/28/2020 00:08:35 PAGE 7   

 364   2              {
 365   3              Motor_HStop(); //硬件停止
 366   3              motor1Cmd=MOTOR_CMD_NULL;
 367   3              return 0;
 368   3              }
 369   2            else if ((motor1Params.PositionABCounter+50)>motor1Params.Motor2MoveStep)//接近目的位置
 370   2              {
 371   3              motor1Params.Motor2Speed=SLOW_SPEED_DUTY; //减速
 372   3              }
 373   2          break;
 374   2          }
 375   1        return 1;
 376   1      }
 377          
 378          //马达线程
 379          void ProcessMotorThread(void)
 380          {
 381   1        //速度调节检测
 382   1        motor1Params.MotorSpeedStatus= MotorACCChangeSpSub();
 383   1        //马达控制
 384   1        if (DoMotorCmd()==0 && (motor1Params.MotorSpeedStatus==MOTOR_ST_STOP || motor1Params.MotorSpeedStatus==MO
             -TOR_ST_CON))
 385   1          //TIM4_Cmd(DISABLE);
 386   1          T4T3M &= 0x7f;                               //定时器停止
 387   1      }
 388          
 389          
 390          
 391          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1127    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     29    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
